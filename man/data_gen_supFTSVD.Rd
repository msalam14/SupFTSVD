% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/supFTSVD.R
\name{data_gen_supFTSVD}
\alias{data_gen_supFTSVD}
\title{Function for generating longitudinal microbiome data}
\usage{
data_gen_supFTSVD(
  m_i,
  Xmatrix,
  Beta,
  Xi,
  PsiF,
  sing_val,
  SubE_Var,
  Data_Var,
  Tgrid = seq(0, 1, length.out = 101)
)
}
\arguments{
\item{m_i}{number of measurements (repeated data) from subject i}

\item{Beta}{regression parameters for subject specific mean}

\item{Xi}{feature singular vector for all modalities ( a list of M elements)}

\item{PsiF}{is a list of M elements; each element is also a list with r 
elements which are functions}

\item{SubE_Var}{a list of M elements; each is a vector of r elements 
represent the variance parameters for subject-loading model}

\item{Data_Var}{a vector of M elements represent measurement error variances 
for different data modalities}

\item{M}{number of modalities}

\item{XMatrix}{design matrix for subject specific mean}
}
\value{
a list with following iterms:
\itemize{
 \item data : a list of n elements; each correspond to data from a subject 
 and a matrix (p+1) by m_i matrix
 \item Xb : a n by r matrix of subject-specific mean for different low-rank 
 components
 \item zeta : a n by r matrix of subject loading for different low-rank 
 components 
 \item singF : singular functions used to generate data
}
}
\description{
Function for generating longitudinal microbiome data
}
\examples{
# feature dimension 

pdim<-c(500)

# No of rank-1 components
lr<-2
r<-lr

# Basis dimension
lmd_val<-c(120,80) #lmd_min*(r:1)

# weight for reminder
sig<-0

# noise variance in tensor
Tau2<-1

# Parameters for supervised component
Eta2<-c(1,1.5) # error variance
gam<-as.matrix(cbind(c(1.5,3),c(2,3.4))) # partial slopes



# Grid of Time points
nres<-51
Time<-seq(0,1,length.out=nres)
#Pht<-PhiF[[1]](Tg)
set.seed(nres)
PhiFunc<-lapply(1:r, function(x){
  function(s){
    a<-t(sapply(s,function(j){
      c(1,sapply(2:10, function(i){sqrt(2)*cos((i-1)*(pi)*j)}))
    }))\%*\%matrix(sapply(1:10,function(j){runif(1,-1/j,1/j)}))
    a/norm(a,type="2")
  }
})
PhiF<-sapply(1:r,function(r){sqrt(length(Time))*PhiFunc[[r]](Time)})

set.seed(pdim)
Bval<<-sapply(1:r, function(b){runif(pdim)})
bval<<-Bval*outer(rep(1,pdim),1/apply(Bval,2,norm,type="2"))


# Grid scenario

Mi<-3:8

n<-50
m_i<-sample(Mi,n,replace = TRUE)
set.seed(n)
Vmat<<-cbind(round(runif(n),2),round(rbeta(n,1,1),2))


data<-data_gen_supFTSVD(m_i=m_i,Xmatrix = Vmat,Beta = gam,Xi = bval,
                  PsiF = PhiF,sing_val = lmd_val,SubE_Var = Eta2,
                  Data_Var = Tau2,Tgrid = Time)

}
